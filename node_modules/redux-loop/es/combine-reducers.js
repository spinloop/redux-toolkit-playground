function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { loop, isLoop, getModel, getCmd } from './loop';
import batchCmds from './batch-cmds';
export default function combineReducers(childMap) {
  return function () {
    var rootState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var action = arguments.length > 1 ? arguments[1] : undefined;

    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    var cmds = [];
    var hasChanged = false;
    var newState = Object.keys(childMap).reduce(function (prev, key) {
      var childReducer = childMap[key];

      if (!childReducer) {
        if (!hasChanged) {
          prev = _objectSpread({}, prev);
          hasChanged = true;
        }

        delete prev[key];
        return prev;
      }

      var currentChild = childReducer.apply(void 0, [prev[key], action].concat(args));

      if (isLoop(currentChild)) {
        cmds.push(getCmd(currentChild));
        currentChild = getModel(currentChild);
      }

      if (prev[key] !== currentChild && hasChanged) {
        prev[key] = currentChild;
      } else if (prev[key] !== currentChild) {
        prev = _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, key, currentChild));
        hasChanged = true;
      }

      return prev;
    }, rootState);
    return loop(newState, batchCmds(cmds));
  };
}