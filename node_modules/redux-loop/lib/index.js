"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.combineReducers = combineReducers;
exports.DEPRECATED_mergeChildReducers = DEPRECATED_mergeChildReducers;
exports.mergeChildReducers = mergeChildReducers;
exports.reduceReducers = reduceReducers;
Object.defineProperty(exports, "loop", {
  enumerable: true,
  get: function get() {
    return _loop.loop;
  }
});
Object.defineProperty(exports, "liftState", {
  enumerable: true,
  get: function get() {
    return _loop.liftState;
  }
});
Object.defineProperty(exports, "getModel", {
  enumerable: true,
  get: function get() {
    return _loop.getModel;
  }
});
Object.defineProperty(exports, "getCmd", {
  enumerable: true,
  get: function get() {
    return _loop.getCmd;
  }
});
Object.defineProperty(exports, "isLoop", {
  enumerable: true,
  get: function get() {
    return _loop.isLoop;
  }
});
Object.defineProperty(exports, "Cmd", {
  enumerable: true,
  get: function get() {
    return _cmd["default"];
  }
});
Object.defineProperty(exports, "install", {
  enumerable: true,
  get: function get() {
    return _install.install;
  }
});

var _loop = require("./loop");

var _cmd = _interopRequireDefault(require("./cmd"));

var _install = require("./install");

var _combineReducers = _interopRequireDefault(require("./combine-reducers"));

var _mergeChildReducers = _interopRequireWildcard(require("./merge-child-reducers"));

var _reduceReducers = _interopRequireDefault(require("./reduce-reducers"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

//by exporting functions, these are able to be spied on
//should be unnecessary after https://github.com/rollup/rollup/issues/826
function combineReducers() {
  return _combineReducers["default"].apply(void 0, arguments);
} // eslint-disable-next-line camelcase


function DEPRECATED_mergeChildReducers() {
  return _mergeChildReducers.DEPRECATED_mergeChildReducers.apply(void 0, arguments);
}

function mergeChildReducers() {
  return _mergeChildReducers["default"].apply(void 0, arguments);
}

function reduceReducers() {
  return _reduceReducers["default"].apply(void 0, arguments);
}