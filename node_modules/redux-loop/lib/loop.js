"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.liftState = exports.loop = exports.getModel = exports.getCmd = exports.isLoop = void 0;

var _utils = require("./utils");

var _cmd = _interopRequireWildcard(require("./cmd"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var isLoop = function isLoop(array) {
  return Array.isArray(array) && array.length === 2 && (0, _cmd.isCmd)(array[1]) && !(0, _cmd.isCmd)(array[0]);
};

exports.isLoop = isLoop;

var getCmd = function getCmd(loop) {
  return isLoop(loop) ? loop[1] : null;
};

exports.getCmd = getCmd;

var getModel = function getModel(loop) {
  return isLoop(loop) ? loop[0] : loop;
};

exports.getModel = getModel;

var loop = function loop(model, cmd) {
  if (process.env.NODE_ENV === 'development') {
    (0, _utils.throwInvariant)((0, _cmd.isCmd)(cmd), 'Given cmd is not an Cmd instance.');
  }

  return [model, cmd];
};

exports.loop = loop;

var liftState = function liftState(state) {
  return isLoop(state) ? state : loop(state, _cmd["default"].none);
};

exports.liftState = liftState;