{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport batchCmds from './batch-cmds';\nimport { loop, isLoop, getModel, getCmd } from './loop';\nexport default (function () {\n  for (var _len = arguments.length, reducers = new Array(_len), _key = 0; _key < _len; _key++) {\n    reducers[_key] = arguments[_key];\n  }\n\n  return function (prevState, action) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      args[_key2 - 2] = arguments[_key2];\n    }\n\n    var _reducers$reduce = reducers.reduce(function (prevResult, reducer) {\n      var result = reducer.apply(void 0, [prevResult.newState, action].concat(args));\n\n      if (isLoop(result)) {\n        return {\n          newState: getModel(result),\n          cmds: [].concat(_toConsumableArray(prevResult.cmds), [getCmd(result)])\n        };\n      }\n\n      return {\n        newState: result,\n        cmds: prevResult.cmds\n      };\n    }, {\n      newState: prevState,\n      cmds: []\n    }),\n        newState = _reducers$reduce.newState,\n        cmds = _reducers$reduce.cmds;\n\n    return loop(newState, batchCmds(cmds));\n  };\n});","map":{"version":3,"sources":["/Users/chriseldridge/git/redux-toolkit-playground/node_modules/redux-loop/es/reduce-reducers.js"],"names":["_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","length","i","arr2","batchCmds","loop","isLoop","getModel","getCmd","_len","arguments","reducers","_key","prevState","action","_len2","args","_key2","_reducers$reduce","reduce","prevResult","reducer","result","apply","newState","concat","cmds"],"mappings":"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","sourcesContent":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport batchCmds from './batch-cmds';\nimport { loop, isLoop, getModel, getCmd } from './loop';\nexport default (function () {\n  for (var _len = arguments.length, reducers = new Array(_len), _key = 0; _key < _len; _key++) {\n    reducers[_key] = arguments[_key];\n  }\n\n  return function (prevState, action) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      args[_key2 - 2] = arguments[_key2];\n    }\n\n    var _reducers$reduce = reducers.reduce(function (prevResult, reducer) {\n      var result = reducer.apply(void 0, [prevResult.newState, action].concat(args));\n\n      if (isLoop(result)) {\n        return {\n          newState: getModel(result),\n          cmds: [].concat(_toConsumableArray(prevResult.cmds), [getCmd(result)])\n        };\n      }\n\n      return {\n        newState: result,\n        cmds: prevResult.cmds\n      };\n    }, {\n      newState: prevState,\n      cmds: []\n    }),\n        newState = _reducers$reduce.newState,\n        cmds = _reducers$reduce.cmds;\n\n    return loop(newState, batchCmds(cmds));\n  };\n});"]},"metadata":{},"sourceType":"module"}